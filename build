#!/bin/bash

#
# Copyright (C) 2018 Yuvraj Saxena (frap130)
#

# Script To Compile Kernels

# Colors
ORNG=$'\033[0;33m'
CYN=$'\033[0;36m'
PURP=$'\033[0;35m'
BLINK_RED=$'\033[05;31m'
BLUE=$'\033[01;34m'
BLD=$'\033[1m'
GRN=$'\033[01;32m'
RED=$'\033[01;31m'
RST=$'\033[0m'
YLW=$'\033[01;33m'

function START_SCRIPT() {
echo "${GRN} Welcome ${RST}"
read -rsn1 -p "${PURP}Type h for help (b|c|h):${RST}" O
	case "${O}" in
                "b"|"build")
                        BUILD=y
                        ;;
		"c"|"clean")
			CLEAN=y
			;;
                "h"|"help")
                        HELP=y
                        ;;
		*)
			echo "${RED}Opps:Invalid Option${RST}"
                        exit 1;
			;;
		esac
		shift
}

function banner() {
clear
        echo "${BLD}${CYN} MADE BY YUVRAJ SAXENA (AKA: frap130)"
        echo
        echo "${GRN}================================================================================================"
        echo
        echo "${BLD}${ORNG}"
        echo "${BLD}${ORNG}                       88   eeee  eeeeee"
        echo "${BLD}${ORNG}eeee eeeee  eeeee eeeee 8      8  8    8"
        echo "${BLD}${ORNG}8    8   8  8   8 8   8 8      8  8    8"
        echo "${BLD}${ORNG}8eee 8eee8e 8eee8 8eee8 8   eee8  8    8"
        echo "${BLD}${ORNG}88   88   8 88  8 88   8888    88 8    8"
        echo "${BLD}${ORNG}88   88   8 88  8 88   8888 eee88 8eeee8"
        echo
        echo "${PURP}================================================================================================"
        echo
        sleep 0.5
clear
}

function BINFO() {
        BNAME="YUVRAJ SAXENA"
        BNICK="frap130"
        echo "${BLD}${CYN} MADE BY ${BNAME} (AKA: ${BNICK})"
        export KBUILD_BUILD_USER=Yuvraj
        export KBUILD_BUILD_HOST=âˆ†Thestral
}

function TOOLCHAIN() {
if [[ ! -d linaro ]];
then
        echo "${RED}####################################"
        echo "${CYN}#       TOOLCHAIN NOT FOUND!       #"
        echo "${YLW}####################################"
clear
        echo "${YLW}####################################"
        echo "${GRN}#       CLONING TOOLCHAIN          #"
        echo "####################################"
        git clone -q https://github.com/frap130/arm-linaro-6.4.1 linaro
        export ARCH=arm CROSS_COMPILE=$PWD/linaro/bin/arm-linux-gnueabihf-
else
        export ARCH=arm CROSS_COMPILE=$PWD/linaro/bin/arm-linux-gnueabihf-
fi
}

function BUILD() {
        mkdir -p out
        echo "${PURP} READING DEFCONFIG..."
        make z5lte_defconfig O=out/ &>> defconfig.log
clear
        echo "${YLW} BUILDING KERNEL..." 
        make -j4 O=out/ &>> Kernel.log
        OIMAGE=out/arch/arm/boot/zImage-dtb
}

function CHECK() {
if [[ ! -e ${OIMAGE} ]];
then
        echo "${RED}############################"
        echo "${RED}#        BUILD ERROR!      #"
        echo "${RED}############################"
        echo "${CYN}#       Uploading Logs     #"
        echo "${RED}############################"
clear
        TRANSFER Kernel.log
else
        echo "${GRN} #####################################"
        echo "${GRN} #                                   #"
        echo "${GRN} #  SUCCESSFULLY BUILDED KERNEL      #"
        echo "${GRN} #        -BY FRAP130                #"
        echo "${GRN} #                                   #"
        echo "${GRN} #####################################"
        echo "${ORNG} #  uploading Kernel                #"
        echo "${ORNG} #####################################"
        mv ${OIMAGE} Kernel
        zip -r Kernel.zip Kernel
clear
        TRANSFER Kernel.zip
fi
}

function CLEAN() {
clear
        echo "${GRN}#        Cleaning Tree!      ${RST}"
        make clean >/dev/null
        make mrproper >/dev/null
clear
}

function HELP() {
	echo "${ORNG}options:"
	echo "${CYN}  b, build     Build Kernel"
	echo "${RST}  c, clean     clean Kernel"
	echo "${GRN}  h, Help      Options"
        read junk
}

function TRANSFER() {
        file="$1"
        zipname=$(echo "${file}" | awk -F '/' '{print $NF}')
        destination="$2"
        url=$(curl -# -T "${file}" https://transfer.sh/${destination})
        printf '\n'
        echo "Download $zipname at $url"
}

function FORMAT_TIME() {
        MINS=$(((${1}-${2})/60))
        SECS=$(((${1}-${2})%60))
if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/60))
        MINS=$((${MINS}%60))
fi

if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
fi

if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
else
        TIME_STRING+="${MINS} MINUTES"
fi

if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
fi

        echo ${TIME_STRING}
}

        BANNER

        START_SCRIPT

if [[ "${BUILD}" = 'y' ]]; then
clear
        START=$(date +"%s")
        TOOLCHAIN
clear
        BINFO
        sleep 0.1
        BUILD
        CHECK
        END=$(date +%s)
        TIME_STRING="$(FORMAT_TIME "${START}" "${END}")"
        echo "${GRN}Completed In: ${TIME_STRING}"
elif [[ "${CLEAN}" = 'y' ]]; then
clear
        CLEAN
else
if [[ "${HELP}" = 'y' ]]; then
clear
        HELP
fi
fi
